# LeetCode Problem: Sum of Root To Leaf Binary Numbers
# Link: https://leetcode.com/problems/sum-of-root-to-leaf-binary-numbers/

class Solution:
    def sumRootToLeaf(self, root: Optional[TreeNode]) -> int:
        """
        Calculates the sum of all root-to-leaf binary numbers in the tree.

        Time Complexity: O(n), where n is the number of nodes in the tree.
        Space Complexity: O(h), where h is the height of the tree due to recursion stack.

        :type root: TreeNode
        :rtype: int
        """

        # Helper function to convert a binary string to a decimal number
        def binary_decimal(n):
            num = 0
            for i in n:
                num = (num << 1) | (int(i))  # Shift left and add the current bit
            return num

        # DFS function to calculate the sum of root-to-leaf binary numbers
        def dfs(node, path):
            if not node:
                return 0

            # Append the current node's value to the path
            path += str(node.val)

            # If it's a leaf node, convert the path to decimal and return the value
            if not node.left and not node.right:
                return binary_decimal(path)

            # Recurse on the left and right subtrees and accumulate the sums
            left_sum = dfs(node.left, path)
            right_sum = dfs(node.right, path)

            return left_sum + right_sum
        
        # Start the DFS from the root and return the sum of all root-to-leaf paths
        return dfs(root, "")
